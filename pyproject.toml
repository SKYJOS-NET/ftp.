[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=63", # required by pyproject+setuptools_scm integration
  "setuptools_scm[toml]>=7.0.5", # required for "no-local-version" scheme

]

[project]
name = "py-sktune"
description = "Unofficial api for skytune radios"
readme = "README.md"
keywords = ["skytune", "ocean digital", "internet radio"]
license = { text = "MIT" }
maintainers = [{ "name" = "Bradley A. Thornton", "email" = "brad@thethorntons.net" }]
authors = [{ "name" = "Bradley A. Thornton", "email" = "brad@thethorntons.net" }]
requires-python = ">=3.10"
classifiers = [
  'Development Status :: 2 - Pre-Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Operating System :: OS Independent',
  'Topic :: Utilities',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: Implementation :: CPython',
  'Programming Language :: Python :: Implementation :: PyPy',
]
dynamic = ["dependencies", "optional-dependencies", "version"]


[tool.setuptools.dynamic]
optional-dependencies.dev = { file = [".config/requirements-dev.txt"] }
optional-dependencies.test = { file = [".config/requirements-test.txt"] }
dependencies = { file = [".config/requirements.in"] }

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/py_skytune/_version.py"

[tool.black]
line-length = 100

[tool.pydoclint]
allow-init-docstring = true
arg-type-hints-in-docstring = false
check-return-types = false
style = 'google'

[tool.pylint]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.master]
# pylint defaults + fh for with open .. as (f|fh)
good-names = "i,j,k,ex,Run,_,f,fh"
jobs = 0
no-docstring-rgx = "__.*__"

[tool.pylint.messages_control]
# missing module docstring will be picked up by ruff
# could not do infile b/c older version of pylint didn't have it
# and ansible-test sanity uses older version in earlier ansible
disable = [
  "duplicate-code",
  "fixme",
  "missing-module-docstring",
  "too-few-public-methods",
  "unsubscriptable-object",
]
enable = [
  "useless-suppression", # Identify unneeded pylint disable statements

]

[tool.pytest.ini_options]
addopts = "-n=auto --dist=loadfile --maxfail=10 --durations=30 --showlocals"

[tool.ruff]
fix = true
line-length = 100
builtins = ["__"]
select = ["ALL"]
# ARG = flake8 argument, overlap with pylint
# FBT = flake8 boolean, silly
# TID = flake8 tidy imports, need relative for pylint
# C901 = flake8 complexity, fixme
# PLR0915 = too many statments, fixme
# RET504 = prefer less complex return statements
ignore = ["ARG", "FBT", "TID", "C901", "PLR0915", "RET504"]
target-version = "py37"

[tool.ruff.isort]
lines-after-imports = 2 # Ensures consistency for cases when there's variable vs function/class definitions after imports
lines-between-types = 1 # Separate import/from with 1 line

[tool.ruff.per-file-ignores]
# S101 Allow assert in tests
# S602 Allow shell in test
# T201 Allow print in tests
"tests/**" = ["S101", "S602", "T201"]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.ruff.flake8-pytest-style]
parametrize-values-type = "tuple"